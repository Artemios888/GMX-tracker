import os
import json
from datetime import datetime
from fetch_gmx_fees import fetch_fees

DATA_FILE = "fees_log.json"

def load_last_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_current_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def notify_if_significant_change(last, current):
    threshold_pct = 20  # % –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    for network in current:
        if network in last:
            prev_fees = last[network]["fees"]
            curr_fees = current[network]["fees"]
            if prev_fees == 0:
                continue
            change_pct = abs((curr_fees - prev_fees) / prev_fees) * 100
            if change_pct >= threshold_pct:
                print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í {network} –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π: {change_pct:.2f}%")
        else:
            print(f"‚ÑπÔ∏è –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—Ç–∏ {network} –∑–∞–ø–∏—Å–∞–Ω—ã.")

def main():
    print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    current_data = fetch_fees()
    current_data["timestamp"] = datetime.utcnow().isoformat()

    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    last_data = load_last_data()

    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
    notify_if_significant_change(last_data, current_data)

    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    save_current_data(current_data)

    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
